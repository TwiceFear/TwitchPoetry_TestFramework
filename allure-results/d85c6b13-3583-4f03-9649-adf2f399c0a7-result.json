{"name": "test_twitch_navigation[StarCraft II]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=133.0.6943.127)\nStacktrace:\n\tGetHandleVerifier [0x006D0B43+25139]\n\t(No symbol) [0x006613F4]\n\t(No symbol) [0x005404E3]\n\t(No symbol) [0x0052FE10]\n\t(No symbol) [0x0054D89A]\n\t(No symbol) [0x005B3DDF]\n\t(No symbol) [0x005CE059]\n\t(No symbol) [0x005ACDC6]\n\t(No symbol) [0x0057BDE9]\n\t(No symbol) [0x0057D124]\n\tGetHandleVerifier [0x009D4373+3185251]\n\tGetHandleVerifier [0x009F291A+3309578]\n\tGetHandleVerifier [0x009ECF42+3286578]\n\tGetHandleVerifier [0x00767AE0+643536]\n\t(No symbol) [0x0066A20D]\n\t(No symbol) [0x006670B8]\n\t(No symbol) [0x00667257]\n\t(No symbol) [0x00659E00]\n\tBaseThreadInitThunk [0x7746FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x777D82AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x777D827E+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d8f7dc8337941991419743bc88a7ab01\")>\nsearch_term = 'StarCraft II'\n\n    @pytest.mark.parametrize('search_term', ['StarCraft II'])\n    @allure.feature('Twitch Navigation')\n    @allure.story('Search and open streamer page')\n    def test_twitch_navigation(driver, search_term):\n        \"\"\"Tests Twitch navigation from Browse to streamer page, ensuring UI elements are functional.\"\"\"\n    \n        home_page = TwitchHomePage(driver, TWITCH_URL)\n        streamer_page = TwitchStreamerPage(driver)\n    \n        # Step 1: Open Twitch and Click Browse\n        home_page.open()\n        home_page.click_browse()\n    \n        # Step 2: Click the Search Icon\n        home_page.click_search_icon()\n    \n        # Step 3: Input Search Term\n        home_page.search_game(search_term)\n    \n        # Slowing down drive for debugging purposes to confirm that scrolling is working\n        #time.sleep(3)\n    \n        # Step 4: Scroll Down Twice\n        Scroller.scroll_down(driver, 4)\n    \n        # Slowing down drive for debugging purposes to confirm selection of streamer after scrolling\n        #time.sleep(3)\n    \n        # Step 5: Select First Streamer\n>       home_page.select_first_streamer()\n\ntests\\test_twitch_navigation.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\twitch_home_page.py:42: in select_first_streamer\n    WebDriverWait(self.driver, 10).until(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:110: in _predicate\n    return driver.find_element(*locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016CFCF63A50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777D82AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777D827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=133.0.6943.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x006D0B43+25139]\nE       \t(No symbol) [0x006613F4]\nE       \t(No symbol) [0x005404E3]\nE       \t(No symbol) [0x0052FE10]\nE       \t(No symbol) [0x0054D89A]\nE       \t(No symbol) [0x005B3DDF]\nE       \t(No symbol) [0x005CE059]\nE       \t(No symbol) [0x005ACDC6]\nE       \t(No symbol) [0x0057BDE9]\nE       \t(No symbol) [0x0057D124]\nE       \tGetHandleVerifier [0x009D4373+3185251]\nE       \tGetHandleVerifier [0x009F291A+3309578]\nE       \tGetHandleVerifier [0x009ECF42+3286578]\nE       \tGetHandleVerifier [0x00767AE0+643536]\nE       \t(No symbol) [0x0066A20D]\nE       \t(No symbol) [0x006670B8]\nE       \t(No symbol) [0x00667257]\nE       \t(No symbol) [0x00659E00]\nE       \tBaseThreadInitThunk [0x7746FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x777D82AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x777D827E+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Tests Twitch navigation from Browse to streamer page, ensuring UI elements are functional.", "attachments": [{"name": "log", "source": "99b49350-2106-4276-b7d9-00c45782a3db-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "search_term", "value": "'StarCraft II'"}], "start": 1740613954351, "stop": 1740613966257, "uuid": "50dfafd0-9eb9-43c9-9673-e12b678cc651", "historyId": "5cf4468b779a017526aa171bb6a24742", "testCaseId": "095f2e488ec6aec6511114fee1e68b1d", "fullName": "tests.test_twitch_navigation#test_twitch_navigation", "labels": [{"name": "feature", "value": "Twitch Navigation"}, {"name": "story", "value": "Search and open streamer page"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_twitch_navigation"}, {"name": "host", "value": "BW091030052"}, {"name": "thread", "value": "30236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_twitch_navigation"}]}